// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS(
    SELECT 1 
    FROM users 
    WHERE email = $1 AND deleted_at IS NULL
)
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, password_hash, created_at, updated_at)
VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, name, email, password_hash, created_at, updated_at, deleted_at, role_id
`

type CreateUserParams struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execrows
UPDATE users 
SET 
    deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash
FROM users
WHERE email = $1 AND deleted_at IS NULL
`

type GetUserByEmailRow struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, created_at 
FROM users 
WHERE id = $1 AND deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT r.name as role
FROM users u
JOIN roles r ON u.role_id = r.id
WHERE u.id = $1 AND u.deleted_at IS NULL
`

func (q *Queries) GetUserRole(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getUserRole, id)
	var role string
	err := row.Scan(&role)
	return role, err
}

const getUserStats = `-- name: GetUserStats :one
SELECT 
    u.id,
    u.name,
    COUNT(DISTINCT i.id) as total_income_records,
    COUNT(DISTINCT e.id) as total_expense_records,
    COUNT(DISTINCT b.id) as total_budgets
FROM users u
LEFT JOIN income i ON u.id = i.user_id AND i.deleted_at IS NULL
LEFT JOIN expenses e ON u.id = e.user_id AND e.deleted_at IS NULL
LEFT JOIN budgets b ON u.id = b.user_id AND b.deleted_at IS NULL
WHERE u.id = $1 AND u.deleted_at IS NULL
GROUP BY u.id, u.name
`

type GetUserStatsRow struct {
	ID                  uuid.UUID `json:"id"`
	Name                string    `json:"name"`
	TotalIncomeRecords  int64     `json:"total_income_records"`
	TotalExpenseRecords int64     `json:"total_expense_records"`
	TotalBudgets        int64     `json:"total_budgets"`
}

func (q *Queries) GetUserStats(ctx context.Context, id uuid.UUID) (GetUserStatsRow, error) {
	row := q.db.QueryRow(ctx, getUserStats, id)
	var i GetUserStatsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TotalIncomeRecords,
		&i.TotalExpenseRecords,
		&i.TotalBudgets,
	)
	return i, err
}

const listUsersByRole = `-- name: ListUsersByRole :many
SELECT u.id, u.name, u.email, r.name as role, u.created_at, u.updated_at
FROM users u
JOIN roles r ON u.role_id = r.id
WHERE r.name = $1 AND u.deleted_at IS NULL
ORDER BY u.created_at DESC
`

type ListUsersByRoleRow struct {
	ID        uuid.UUID  `json:"id"`
	Name      string     `json:"name"`
	Email     string     `json:"email"`
	Role      string     `json:"role"`
	CreatedAt time.Time  `json:"created_at"`
	UpdatedAt *time.Time `json:"updated_at"`
}

func (q *Queries) ListUsersByRole(ctx context.Context, name string) ([]ListUsersByRoleRow, error) {
	rows, err := q.db.Query(ctx, listUsersByRole, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersByRoleRow
	for rows.Next() {
		var i ListUsersByRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET 
    name = $2,
    email = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, email, password_hash, created_at, updated_at, deleted_at, role_id
`

type UpdateUserParams struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users 
SET 
    password_hash = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID `json:"id"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE users 
SET 
    role_id = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, email, password_hash, created_at, updated_at, deleted_at, role_id
`

type UpdateUserRoleParams struct {
	ID     uuid.UUID `json:"id"`
	RoleID uuid.UUID `json:"role_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserRole, arg.ID, arg.RoleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}
