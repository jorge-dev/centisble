// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: expenses.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (
    id, user_id, amount, currency, category,
    date, description, created_at, updated_at
)
VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id, user_id, amount, currency, category, date, description, created_at, updated_at, deleted_at
`

type CreateExpenseParams struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	Amount      float64   `json:"amount"`
	Currency    string    `json:"currency"`
	Category    string    `json:"category"`
	Date        time.Time `json:"date"`
	Description string    `json:"description"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, createExpense,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.Currency,
		arg.Category,
		arg.Date,
		arg.Description,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Currency,
		&i.Category,
		&i.Date,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :execrows
UPDATE expenses 
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2 AND deleted_at IS NULL
`

type DeleteExpenseParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteExpense(ctx context.Context, arg DeleteExpenseParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteExpense, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getExpenseByID = `-- name: GetExpenseByID :one
SELECT id, user_id, amount, currency, category, date, description, created_at, updated_at, deleted_at FROM expenses
WHERE id = $1 AND user_id = $2 AND deleted_at IS NULL
`

type GetExpenseByIDParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetExpenseByID(ctx context.Context, arg GetExpenseByIDParams) (Expense, error) {
	row := q.db.QueryRow(ctx, getExpenseByID, arg.ID, arg.UserID)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Currency,
		&i.Category,
		&i.Date,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getExpenseTotalsByCategory = `-- name: GetExpenseTotalsByCategory :many
SELECT 
    category,
    currency,
    COUNT(*) as transaction_count,
    SUM(amount) as total_amount
FROM expenses
WHERE user_id = $1 
    AND deleted_at IS NULL
    AND date >= $2::TIMESTAMPTZ
    AND date <= $3::TIMESTAMPTZ
GROUP BY category, currency
ORDER BY total_amount DESC
`

type GetExpenseTotalsByCategoryParams struct {
	UserID    uuid.UUID `json:"user_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

type GetExpenseTotalsByCategoryRow struct {
	Category         string `json:"category"`
	Currency         string `json:"currency"`
	TransactionCount int64  `json:"transaction_count"`
	TotalAmount      int64  `json:"total_amount"`
}

func (q *Queries) GetExpenseTotalsByCategory(ctx context.Context, arg GetExpenseTotalsByCategoryParams) ([]GetExpenseTotalsByCategoryRow, error) {
	rows, err := q.db.Query(ctx, getExpenseTotalsByCategory, arg.UserID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExpenseTotalsByCategoryRow
	for rows.Next() {
		var i GetExpenseTotalsByCategoryRow
		if err := rows.Scan(
			&i.Category,
			&i.Currency,
			&i.TransactionCount,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpensesByCategory = `-- name: GetExpensesByCategory :many
SELECT id, user_id, amount, currency, category, date, description, created_at, updated_at, deleted_at FROM expenses
WHERE user_id = $1 
    AND category = $2 
    AND deleted_at IS NULL
    AND date >= $3::TIMESTAMPTZ
    AND date <= $4::TIMESTAMPTZ
ORDER BY date DESC
`

type GetExpensesByCategoryParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Category  string    `json:"category"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) GetExpensesByCategory(ctx context.Context, arg GetExpensesByCategoryParams) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getExpensesByCategory,
		arg.UserID,
		arg.Category,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Currency,
			&i.Category,
			&i.Date,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpensesByDateRange = `-- name: GetExpensesByDateRange :many
SELECT id, user_id, amount, currency, category, date, description, created_at, updated_at, deleted_at FROM expenses
WHERE user_id = $1 
    AND deleted_at IS NULL
    AND date >= $2::TIMESTAMPTZ
    AND date <= $3::TIMESTAMPTZ
ORDER BY date DESC
`

type GetExpensesByDateRangeParams struct {
	UserID    uuid.UUID `json:"user_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) GetExpensesByDateRange(ctx context.Context, arg GetExpensesByDateRangeParams) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getExpensesByDateRange, arg.UserID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Currency,
			&i.Category,
			&i.Date,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthlyExpenseTotal = `-- name: GetMonthlyExpenseTotal :many
SELECT 
    COALESCE(SUM(amount), 0)::float8 as total_amount,
    currency as currency
FROM expenses
WHERE user_id = $1 
    AND deleted_at IS NULL
    AND DATE_TRUNC('month', date) = DATE_TRUNC('month', $2::TIMESTAMPTZ)
GROUP BY currency
`

type GetMonthlyExpenseTotalParams struct {
	UserID uuid.UUID `json:"user_id"`
	Date   time.Time `json:"date"`
}

type GetMonthlyExpenseTotalRow struct {
	TotalAmount float64 `json:"total_amount"`
	Currency    string  `json:"currency"`
}

func (q *Queries) GetMonthlyExpenseTotal(ctx context.Context, arg GetMonthlyExpenseTotalParams) ([]GetMonthlyExpenseTotalRow, error) {
	rows, err := q.db.Query(ctx, getMonthlyExpenseTotal, arg.UserID, arg.Date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMonthlyExpenseTotalRow
	for rows.Next() {
		var i GetMonthlyExpenseTotalRow
		if err := rows.Scan(&i.TotalAmount, &i.Currency); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentExpenses = `-- name: GetRecentExpenses :many
SELECT id, user_id, amount, currency, category, date, description, created_at, updated_at, deleted_at FROM expenses
WHERE user_id = $1 
    AND deleted_at IS NULL
ORDER BY date DESC
LIMIT $2
`

type GetRecentExpensesParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) GetRecentExpenses(ctx context.Context, arg GetRecentExpensesParams) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getRecentExpenses, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Currency,
			&i.Category,
			&i.Date,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExpenses = `-- name: ListExpenses :many
SELECT id, user_id, amount, currency, category, date, description, created_at, updated_at, deleted_at FROM expenses
WHERE user_id = $1 AND deleted_at IS NULL
ORDER BY date DESC
`

func (q *Queries) ListExpenses(ctx context.Context, userID uuid.UUID) ([]Expense, error) {
	rows, err := q.db.Query(ctx, listExpenses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Currency,
			&i.Category,
			&i.Date,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE expenses 
SET 
    amount = $2,
    currency = $3,
    category = $4,
    date = $5,
    description = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $7 AND deleted_at IS NULL
RETURNING id, user_id, amount, currency, category, date, description, created_at, updated_at, deleted_at
`

type UpdateExpenseParams struct {
	ID          uuid.UUID `json:"id"`
	Amount      float64   `json:"amount"`
	Currency    string    `json:"currency"`
	Category    string    `json:"category"`
	Date        time.Time `json:"date"`
	Description string    `json:"description"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, updateExpense,
		arg.ID,
		arg.Amount,
		arg.Currency,
		arg.Category,
		arg.Date,
		arg.Description,
		arg.UserID,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Currency,
		&i.Category,
		&i.Date,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
