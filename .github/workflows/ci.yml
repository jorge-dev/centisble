name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  # trigger workflow manually to support creating cache
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.x" # Adjust to your required Go version

      - name: Restore cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build  # Go build cache
            ~/go/pkg/mod       # Go modules cache
          key: ${{ runner.os }}-go-${{ hashFiles('**/*.go', 'go.mod', 'go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: go mod download

      - name: Export environment variables
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "APP_ENV=${{ env.APP_ENV }}" >> $GITHUB_ENV
          echo "RUN_MIGRATION=${{ env.RUN_MIGRATION }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "CENTSIBLE_DB_HOST=${{ secrets.CENTSIBLE_DB_HOST }}" >> $GITHUB_ENV
          echo "CENTSIBLE_DB_PORT=${{ env.CENTSIBLE_DB_PORT }}" >> $GITHUB_ENV
          echo "CENTSIBLE_DB_DATABASE=${{ secrets.CENTSIBLE_DB_DATABASE }}" >> $GITHUB_ENV
          echo "CENTSIBLE_DB_USERNAME=${{ secrets.CENTSIBLE_DB_USERNAME }}" >> $GITHUB_ENV
          echo "CENTSIBLE_DB_PASSWORD=${{ secrets.CENTSIBLE_DB_PASSWORD }}" >> $GITHUB_ENV
          echo "CENTSIBLE_DB_SCHEMA=${{ env.CENTSIBLE_DB_SCHEMA }}" >> $GITHUB_ENV

      - name: Build application
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          GIT_COMMIT=$(git rev-parse HEAD)
          VERSION=$(git describe --tags --abbrev=0 | tr -d '\n')
          echo "Building version: ${VERSION} commit: ${GIT_COMMIT} date: ${BUILD_DATE}"
          go build -o main -ldflags="-X 'github.com/jorge-dev/centsible/internal/version.buildDate=${BUILD_DATE}' -X 'github.com/jorge-dev/centsible/internal/version.gitCommit=${GIT_COMMIT}' -X 'github.com/jorge-dev/centsible/internal/version.gitVersion=${VERSION}'" ./cmd/api/main.go

      - name: Format code
        if: steps.cache.outputs.cache-hit != 'true'
        run: make format

      - name: Run tests
        if: steps.cache.outputs.cache-hit != 'true'
        run: go test -v ./...

      - name: Build skipped
        if: steps.cache.outputs.cache-hit == 'true'
        run: echo "No changes in Go files. Build steps are skipped due to cache hit."
