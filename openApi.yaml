openapi: 3.1.0
info:
  title: Budget Tracking API
  description: API for managing income, expenses, recurring and one-time budgets, and financial summaries.
  version: 1.2.0
  contact:
    name: John Doe
    email: ""
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: Authentication
    description: Operations related to user authentication
  - name: Income
    description: Operations related to income records
  - name: Expenses
    description: Operations related to expense records
  - name: Budgets
    description: Operations related to budget records
  - name: Summary
    description: Operations related to financial summaries
  - name: Live
    description: Operations related to checking API status
  - name: Health
    description: Operations related to checking API health
  - name: User
    description: Operations related to user profile and statistics

paths:
  /register:
    post:
      description: Register a new user
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Invalid input
  /login:
    post:
      description: Authenticate user and return JWT token
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Unauthorized - Invalid credentials
  /income:
    post:
      description: Add a new income record
      operationId: addIncomeRecord
      tags:
        - Income
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIncomeRequest"
      responses:
        "201":
          description: Income record created successfully
        "400":
          description: Invalid input
    get:
      description: Get all income records
      operationId: getAllIncomeRecords
      tags:
        - Income
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of income records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IncomeRecordResponse"
  /income/{id}:
    get:
      description: Get an income record by ID
      operationId: getIncomeByID
      tags:
        - Income
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Income record details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeRecordResponse"
        "404":
          description: Income record not found
    put:
      description: Update an existing income record
      operationId: updateIncomeRecord
      tags:
        - Income
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIncomeRequest"
      responses:
        "200":
          description: Income record updated successfully
        "400":
          description: Invalid input
    delete:
      description: Delete an income record
      operationId: deleteIncomeRecord
      tags:
        - Income
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Income record deleted successfully
  /expenses:
    post:
      description: Add a new expense record
      operationId: addExpenseRecord
      tags:
        - Expenses
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpenseRecord"
      responses:
        "201":
          description: Expense record created successfully
        "400":
          description: Invalid input
    get:
      description: Get all expense records
      operationId: getAllExpenseRecords
      tags:
        - Expenses
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of expense records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExpenseRecordResponse"
  /budgets:
    post:
      description: Create a new budget
      operationId: addBudgetRecord
      tags:
        - Budgets
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetRecord"
      responses:
        "201":
          description: Budget created successfully
        "400":
          description: Invalid input
    get:
      description: Get all budgets
      operationId: getAllBudgetRecords
      tags:
        - Budgets
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of budgets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetRecordResponse"
    put:
      description: Update an existing budget
      operationId: updateBudgetRecord
      tags:
        - Budgets
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetUpdate"
      responses:
        "200":
          description: Budget updated successfully
        "400":
          description: Invalid input
  /summary/monthly:
    get:
      description: Get a monthly financial summary
      operationId: getMonthlySummary
      tags:
        - Summary
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Monthly summary of income, expenses, and budgets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonthlySummary"
  /summary/yearly:
    get:
      description: Get a yearly financial summary
      operationId: getYearlySummary
      tags:
        - Summary
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Yearly summary of income, expenses, and budgets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/YearlySummary"
  /live:
    get:
      description: Check if the API is live
      operationId: checkLive
      tags:
        - Live
      responses:
        "200":
          description: API is live
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  message:
                    type: string
                    example: "API is live"
                  version:
                    type: string
                    example: "1.0.0"
  /health:
    get:
      description: Check the health of the API
      operationId: checkHealth
      tags:
        - Health
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "up"
                  message:
                    type: string
                    example: "API is healthy"
  /user/profile:
    get:
      description: Get user profile information
      operationId: getUserProfile
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
    put:
      description: Update user profile information
      operationId: updateUserProfile
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileRequest"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
        "400":
          description: Invalid input

  /user/password:
    put:
      description: Update user password
      operationId: updateUserPassword
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        "200":
          description: Password updated successfully
        "401":
          description: Unauthorized or invalid current password
        "400":
          description: Invalid input

  /user/stats:
    get:
      description: Get user statistics
      operationId: getUserStats
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStats"
        "401":
          description: Unauthorized
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterUser:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: strongpassword123
      required:
        - name
        - email
        - password
    LoginUser:
      type: object
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: strongpassword123
      required:
        - email
        - password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    CreateIncomeRequest:
      type: object
      properties:
        amount:
          type: number
          format: float
          example: 1500.00
        currency:
          type: string
          example: USD
        source:
          type: string
          example: Salary
        date:
          type: string
          format: date
          example: 2024-01-15
        description:
          type: string
          example: Monthly salary for January
      required:
        - amount
        - currency
        - source
        - date
    IncomeRecordResponse:
      type: object
      properties:
        id:
          type: string
          example: "1"
        amount:
          type: number
          format: float
          example: 1500.00
        currency:
          type: string
          example: USD
        source:
          type: string
          example: Salary
        date:
          type: string
          format: date
          example: 2024-01-15
        description:
          type: string
          example: Monthly salary for January
    ExpenseRecord:
      type: object
      properties:
        amount:
          type: number
          format: float
          example: 100.00
        currency:
          type: string
          example: USD
        category:
          type: string
          example: Groceries
        date:
          type: string
          format: date
          example: 2024-01-16
        description:
          type: string
          example: Grocery shopping at local market
      required:
        - amount
        - currency
        - category
        - date
    ExpenseRecordResponse:
      type: object
      properties:
        id:
          type: string
          example: "1"
        amount:
          type: number
          format: float
          example: 100.00
        currency:
          type: string
          example: USD
        category:
          type: string
          example: Groceries
        date:
          type: string
          format: date
          example: 2024-01-16
        description:
          type: string
          example: Grocery shopping at local market
    BudgetRecord:
      type: object
      properties:
        amount:
          type: number
          format: float
          example: 500.00
        currency:
          type: string
          example: USD
        category:
          type: string
          example: Groceries
        type:
          type: string
          enum: [recurring, one-time]
          example: recurring
        start_date:
          type: string
          format: date
          example: 2024-01-01
        end_date:
          type: string
          format: date
          example: 2024-12-31
      required:
        - amount
        - currency
        - category
        - type
        - start_date
    BudgetRecordResponse:
      type: object
      properties:
        id:
          type: string
          example: "1"
        amount:
          type: number
          format: float
          example: 500.00
        currency:
          type: string
          example: USD
        category:
          type: string
          example: Groceries
        type:
          type: string
          enum: [recurring, one-time]
          example: recurring
        start_date:
          type: string
          format: date
          example: 2024-01-01
        end_date:
          type: string
          format: date
          example: 2024-12-31
    BudgetUpdate:
      type: object
      properties:
        amount:
          type: number
          format: float
          example: 600.00
        currency:
          type: string
          example: USD
        end_date:
          type: string
          format: date
          example: 2025-12-31
    MonthlySummary:
      type: object
      properties:
        total_income:
          type: number
          format: float
          example: 5000.00
        total_expenses:
          type: number
          format: float
          example: 3000.00
        total_savings:
          type: number
          format: float
          example: 2000.00
        currency:
          type: string
          example: USD
        top_expense_categories:
          type: array
          items:
            type: string
            example: Groceries
    YearlySummary:
      type: object
      properties:
        total_income:
          type: number
          format: float
          example: 60000.00
        total_expenses:
          type: number
          format: float
          example: 36000.00
        total_savings:
          type: number
          format: float
          example: 24000.00
        currency:
          type: string
          example: USD
        top_expense_categories:
          type: array
          items:
            type: string
            example: Rent
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        created_at:
          type: string
          format: date-time
          example: "2024-01-17T10:00:00Z"
    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
    UpdatePasswordRequest:
      type: object
      properties:
        current_password:
          type: string
          format: password
          example: "currentPass123"
        new_password:
          type: string
          format: password
          example: "newPass123"
      required:
        - current_password
        - new_password
    UserStats:
      type: object
      properties:
        total_income:
          type: number
          format: float
          example: 5000.00
        total_expenses:
          type: number
          format: float
          example: 3000.00
        average_monthly_savings:
          type: number
          format: float
          example: 2000.00
        budget_adherence:
          type: number
          format: float
          example: 85.5
