openapi: 3.1.0
info:
  title: Budget Tracking API
  description: API for managing income, expenses, recurring and one-time budgets, and financial summaries.
  version: 1.3.0
  contact:
    name: John Doe
    email: ""
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: Authentication
    description: Operations related to user authentication
  - name: Income
    description: Operations related to income records
  - name: Expenses
    description: Operations related to expense records
  - name: Budgets
    description: Operations related to budget records
  - name: Summary
    description: Operations related to financial summaries
  - name: Live
    description: Operations related to checking API status
  - name: Health
    description: Operations related to checking API health
  - name: User
    description: Operations related to user profile and statistics
  - name: Categories
    description: Operations related to expense categories

paths:
  /register:
    post:
      description: Register a new user
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Invalid input
  /login:
    post:
      description: Authenticate user and return JWT token
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Unauthorized - Invalid credentials
  /income:
    post:
      description: Add a new income record
      operationId: addIncomeRecord
      tags:
        - Income
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIncomeRequest"
      responses:
        "201":
          description: Income record created successfully
        "400":
          description: Invalid input
    get:
      description: Get all income records
      operationId: getAllIncomeRecords
      tags:
        - Income
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of income records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IncomeRecordResponse"
  /income/{id}:
    get:
      description: Get an income record by ID
      operationId: getIncomeByID
      tags:
        - Income
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Income record details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncomeRecordResponse"
        "404":
          description: Income record not found
    put:
      description: Update an existing income record
      operationId: updateIncomeRecord
      tags:
        - Income
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIncomeRequest"
      responses:
        "200":
          description: Income record updated successfully
        "400":
          description: Invalid input
    delete:
      description: Delete an income record
      operationId: deleteIncomeRecord
      tags:
        - Income
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Income record deleted successfully
  /expenses:
    post:
      description: Add a new expense record
      operationId: addExpenseRecord
      tags:
        - Expenses
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpenseRecord"
      responses:
        "201":
          description: Expense record created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseRecordResponse"
    get:
      description: Get all expense records
      operationId: getAllExpenseRecords
      tags:
        - Expenses
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of expense records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExpenseRecordResponse"
  /expenses/{id}:
    get:
      description: Get an expense record by ID
      operationId: getExpenseByID
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Expense record found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseRecordResponse"
        "404":
          description: Expense record not found
    put:
      description: Update an expense record
      operationId: updateExpense
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpenseRecord"
      responses:
        "200":
          description: Expense updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseRecordResponse"
    delete:
      description: Delete an expense record
      operationId: deleteExpense
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Expense deleted successfully
  /expenses/category/{category}:
    get:
      description: Get expenses by category
      operationId: getExpensesByCategory
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of expenses for the category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExpenseRecordResponse"
  /expenses/range:
    get:
      description: Get expenses within a date range
      operationId: getExpensesByDateRange
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: start_date
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: List of expenses within date range
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExpenseRecordResponse"
  /expenses/recent:
    get:
      description: Get recent expenses
      operationId: getRecentExpenses
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: List of recent expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExpenseRecordResponse"
  /expenses/monthly/total:
    get:
      description: Get monthly expense total
      operationId: getMonthlyExpenseTotal
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: date-time
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Monthly expense total
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_amount:
                    type: number
                    format: float
                  currency:
                    type: string
  /expenses/category/totals:
    get:
      description: Get expense totals by category
      operationId: getExpenseTotalsByCategory
      tags:
        - Expenses
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Expense totals by category
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    category_id:
                      type: string
                      format: uuid
                    category_name:
                      type: string
                    currency:
                      type: string
                    transaction_count:
                      type: integer
                    total_amount:
                      type: number
                      format: float
  /budgets:
    post:
      description: Create a new budget
      operationId: addBudgetRecord
      tags:
        - Budgets
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetRecord"
      responses:
        "201":
          description: Budget created successfully
        "400":
          description: Invalid input
    get:
      description: Get all budgets
      operationId: getAllBudgetRecords
      tags:
        - Budgets
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of budgets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetRecordResponse"
    put:
      description: Update an existing budget
      operationId: updateBudgetRecord
      tags:
        - Budgets
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetUpdate"
      responses:
        "200":
          description: Budget updated successfully
        "400":
          description: Invalid input
  /summary/monthly:
    get:
      description: Get a monthly financial summary
      operationId: getMonthlySummary
      tags:
        - Summary
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Monthly summary of income, expenses, and budgets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonthlySummary"
  /summary/yearly:
    get:
      description: Get a yearly financial summary
      operationId: getYearlySummary
      tags:
        - Summary
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Yearly summary of income, expenses, and budgets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/YearlySummary"
  /live:
    get:
      description: Check if the API is live
      operationId: checkLive
      tags:
        - Live
      responses:
        "200":
          description: API is live
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  message:
                    type: string
                    example: "API is live"
                  version:
                    type: string
                    example: "1.0.0"
  /health:
    get:
      description: Check the health of the API
      operationId: checkHealth
      tags:
        - Health
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "up"
                  message:
                    type: string
                    example: "API is healthy"
  /user/profile:
    get:
      description: Get user profile information
      operationId: getUserProfile
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
    put:
      description: Update user profile information
      operationId: updateUserProfile
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileRequest"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
        "400":
          description: Invalid input

  /user/password:
    put:
      description: Update user password
      operationId: updateUserPassword
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        "200":
          description: Password updated successfully
        "401":
          description: Unauthorized or invalid current password
        "400":
          description: Invalid input

  /user/stats:
    get:
      description: Get user statistics
      operationId: getUserStats
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStats"
        "401":
          description: Unauthorized

  /categories:
    post:
      description: Create a new category
      operationId: createCategory
      tags:
        - Categories
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCategoryRequest"
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "400":
          description: Invalid input
        "409":
          description: Category already exists
    get:
      description: List all categories for the user
      operationId: listCategories
      tags:
        - Categories
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryResponse"

  /categories/{id}:
    get:
      description: Get a category by ID
      operationId: getCategoryById
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Category details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "404":
          description: Category not found
    put:
      description: Update a category
      operationId: updateCategory
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCategoryRequest"
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "404":
          description: Category not found
    delete:
      description: Delete a category
      operationId: deleteCategory
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Category deleted successfully
        "404":
          description: Category not found

  /categories/{id}/stats:
    get:
      description: Get usage statistics for a category
      operationId: getCategoryStats
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Category usage statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryStats"
        "404":
          description: Category not found

  /categories/stats/most-used:
    get:
      description: Get most used categories
      operationId: getMostUsedCategories
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Maximum number of categories to return
      responses:
        "200":
          description: List of most used categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryUsageStats"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterUser:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: strongpassword123
      required:
        - name
        - email
        - password
    LoginUser:
      type: object
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: strongpassword123
      required:
        - email
        - password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    CreateIncomeRequest:
      type: object
      properties:
        amount:
          type: number
          format: float
          example: 1500.00
        currency:
          type: string
          example: USD
        source:
          type: string
          example: Salary
        date:
          type: string
          format: date-time
          example: 2024-01-15T00:00:00Z
        description:
          type: string
          example: Monthly salary for January
      required:
        - amount
        - currency
        - source
        - date
    IncomeRecordResponse:
      type: object
      properties:
        id:
          type: string
          example: "1"
        amount:
          type: number
          format: float
          example: 1500.00
        currency:
          type: string
          example: USD
        source:
          type: string
          example: Salary
        date:
          type: string
          format: date-time
          example: 2024-01-15T00:00:00Z
        description:
          type: string
          example: Monthly salary for January
    ExpenseRecord:
      type: object
      properties:
        amount:
          type: number
          format: float
          example: 100.00
        currency:
          type: string
          example: USD
        category:
          type: string
          example: Groceries
        date:
          type: string
          format: date-time
          example: 2024-01-16T00:00:00Z
        description:
          type: string
          example: Grocery shopping at local market
      required:
        - amount
        - currency
        - category
        - date
    ExpenseRecordResponse:
      type: object
      properties:
        id:
          type: string
          example: "1"
        amount:
          type: number
          format: float
          example: 100.00
        currency:
          type: string
          example: USD
        category:
          type: string
          example: Groceries
        date:
          type: string
          format: date-time
          example: 2024-01-16T00:00:00Z
        description:
          type: string
          example: Grocery shopping at local market
    BudgetRecord:
      type: object
      properties:
        amount:
          type: number
          format: float
          example: 500.00
        currency:
          type: string
          example: USD
        category:
          type: string
          example: Groceries
        type:
          type: string
          enum: [recurring, one-time]
          example: recurring
        start_date:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z
        end_date:
          type: string
          format: date-time
          example: 2024-12-31T00:00:00Z
      required:
        - amount
        - currency
        - category
        - type
        - start_date
    BudgetRecordResponse:
      type: object
      properties:
        id:
          type: string
          example: "1"
        amount:
          type: number
          format: float
          example: 500.00
        currency:
          type: string
          example: USD
        category:
          type: string
          example: Groceries
        type:
          type: string
          enum: [recurring, one-time]
          example: recurring
        start_date:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z
        end_date:
          type: string
          format: date-time
          example: 2024-12-31T00:00:00Z
    BudgetUpdate:
      type: object
      properties:
        amount:
          type: number
          format: float
          example: 600.00
        currency:
          type: string
          example: USD
        end_date:
          type: string
          format: date-time
          example: 2025-12-31T00:00:00Z
    MonthlySummary:
      type: object
      properties:
        total_income:
          type: number
          format: float
          example: 5000.00
        total_expenses:
          type: number
          format: float
          example: 3000.00
        total_savings:
          type: number
          format: float
          example: 2000.00
        currency:
          type: string
          example: USD
        top_expense_categories:
          type: array
          items:
            type: string
            example: Groceries
    YearlySummary:
      type: object
      properties:
        total_income:
          type: number
          format: float
          example: 60000.00
        total_expenses:
          type: number
          format: float
          example: 36000.00
        total_savings:
          type: number
          format: float
          example: 24000.00
        currency:
          type: string
          example: USD
        top_expense_categories:
          type: array
          items:
            type: string
            example: Rent
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        created_at:
          type: string
          format: date-time
          example: "2024-01-17T10:00:00Z"
    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
    UpdatePasswordRequest:
      type: object
      properties:
        current_password:
          type: string
          format: password
          example: "currentPass123"
        new_password:
          type: string
          format: password
          example: "newPass123"
      required:
        - current_password
        - new_password
    UserStats:
      type: object
      properties:
        total_income:
          type: number
          format: float
          example: 5000.00
        total_expenses:
          type: number
          format: float
          example: 3000.00
        average_monthly_savings:
          type: number
          format: float
          example: 2000.00
        budget_adherence:
          type: number
          format: float
          example: 85.5
    CreateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          example: "Groceries"
      required:
        - name

    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          example: "Food & Groceries"
      required:
        - name

    CategoryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        user_id:
          type: string
          format: uuid
        name:
          type: string
          example: "Groceries"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true

    CategoryStats:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        expense_count:
          type: integer
          format: int64
        budget_count:
          type: integer
          format: int64
        total_expenses:
          type: number
          format: double

    CategoryUsageStats:
      type: object
      properties:
        name:
          type: string
        usage_count:
          type: integer
          format: int64
        total_amount:
          type: number
          format: double
